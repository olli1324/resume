[
  {
    "question": "What is the primary technical imperative in software development according to Code Complete?",
    "options": [
      "Maximizing performance and minimizing memory usage",
      "Managing complexity and maintaining intellectual control",
      "Following established coding standards and conventions",
      "Implementing the most advanced algorithms available"
    ],
    "correctAnswer": 1,
    "explanation": "Managing complexity is the single most important technical goal in software development.",
    "detailedExplanation": "Code Complete emphasizes that complexity management is software's primary technical imperative. When projects fail, it's often because their complexity exceeded the team's capacity to manage it. All other practices like good naming, proper routines, and clear classes serve this fundamental goal of keeping programs intellectually manageable.",
    "topic": "software-complexity"
  },
  {
    "question": "According to research cited in Code Complete, what is the optimal length for variable names in terms of debugging effort?",
    "options": [
      "Variables averaging 5-8 characters were easiest to debug",
      "Variables averaging 10-16 characters minimized debugging effort",
      "Variables averaging 20-25 characters showed best results",
      "Variables averaging 3-5 characters required least maintenance"
    ],
    "correctAnswer": 1,
    "explanation": "Research found debugging effort was minimized with names averaging 10-16 characters.",
    "detailedExplanation": "Gorla, Benander, and Benander found that debugging effort was minimized when variables had names averaging 10-16 characters. Programs with names averaging 8-20 characters were almost as easy to debug. This suggests many variable names are too short and don't convey enough meaning to aid in debugging.",
    "topic": "variable-naming"
  },
  {
    "question": "What percentage of highly cohesive routines were found to be fault-free compared to low-cohesion routines?",
    "options": [
      "35% of high-cohesion vs 15% of low-cohesion routines were fault-free",
      "50% of high-cohesion vs 18% of low-cohesion routines were fault-free",
      "65% of high-cohesion vs 25% of low-cohesion routines were fault-free",
      "40% of high-cohesion vs 20% of low-cohesion routines were fault-free"
    ],
    "correctAnswer": 1,
    "explanation": "Studies showed 50% of highly cohesive routines were fault-free versus only 18% of low-cohesion routines.",
    "detailedExplanation": "Research demonstrated the dramatic impact of cohesion on code quality. When routines have functional cohesion (doing one thing well), they are nearly three times more likely to be fault-free compared to routines with poor cohesion that try to do multiple unrelated things.",
    "topic": "routine-design"
  },
  {
    "question": "Which principle states that subclasses must be usable through the base class interface without the user knowing the difference?",
    "options": [
      "The Open/Closed Principle for inheritance hierarchies",
      "The Liskov Substitution Principle for polymorphic behavior",
      "The Interface Segregation Principle for class design",
      "The Dependency Inversion Principle for abstraction layers"
    ],
    "correctAnswer": 1,
    "explanation": "The Liskov Substitution Principle ensures true 'is a' relationships in inheritance.",
    "detailedExplanation": "Barbara Liskov's principle states that derived classes must be completely substitutable for their base classes. All routines defined in the base class should mean the same thing when used in derived classes. If programmers must think about semantic differences in subclass implementations, inheritance is increasing complexity rather than reducing it.",
    "topic": "inheritance"
  },
  {
    "question": "What is the recommended maximum depth for inheritance trees according to Code Complete?",
    "options": [
      "No more than 4 levels to maintain comprehensibility",
      "Maximum of 6 levels with preference for fewer",
      "Up to 8 levels if properly documented throughout",
      "No specific limit if abstraction is maintained consistently"
    ],
    "correctAnswer": 1,
    "explanation": "Arthur Riel suggests limiting inheritance hierarchies to a maximum of 6 levels.",
    "detailedExplanation": "While Riel suggests 6 levels maximum, Code Complete notes that most people have trouble juggling more than 2-3 levels mentally. Deep inheritance trees are associated with increased fault rates and complexity, which contradicts inheritance's purpose of reducing complexity. The focus should be on managing complexity effectively.",
    "topic": "inheritance"
  },
  {
    "question": "According to the '7±2' principle, what should you consider when a class has more than about seven data members?",
    "options": [
      "Add more documentation to explain the relationships between members",
      "Consider decomposing the class into multiple smaller classes",
      "Reorganize the members into logical groups with clear naming",
      "Implement additional getter and setter methods for encapsulation"
    ],
    "correctAnswer": 1,
    "explanation": "Classes with more than 7 data members should be considered for decomposition.",
    "detailedExplanation": "The number '7±2' represents discrete items a person can remember while performing other tasks. If a class contains more than about seven data members, consider whether it should be decomposed into multiple smaller classes. You might err toward the high end if members are primitive types, toward the lower end if they're complex objects.",
    "topic": "class-design"
  },
  {
    "question": "What does the Law of Demeter primarily restrict in object-oriented programming?",
    "options": [
      "The number of methods that can be called on any single object",
      "How objects should interact to minimize indirect routine calls",
      "The maximum inheritance depth allowed in class hierarchies",
      "The types of data that can be passed between object methods"
    ],
    "correctAnswer": 1,
    "explanation": "The Law of Demeter limits how objects interact to reduce coupling.",
    "detailedExplanation": "The Law of Demeter states that Object A can call its own routines and routines of objects it creates, but should avoid calling routines on objects provided by other objects. For example, account.ContactPerson() is OK, but account.ContactPerson().DaytimeContactInfo().PhoneNumber() violates the principle because it creates hazardous indirect connections.",
    "topic": "object-interaction"
  },
  {
    "question": "What is the fundamental difference between abstraction and encapsulation according to Code Complete?",
    "options": [
      "Abstraction hides complexity while encapsulation manages inheritance relationships",
      "Abstraction provides models while encapsulation prevents access to details",
      "Abstraction handles data organization while encapsulation manages method visibility",
      "Abstraction focuses on interfaces while encapsulation handles implementation details"
    ],
    "correctAnswer": 1,
    "explanation": "Encapsulation is the enforcer that prevents access to details even if you want to see them.",
    "detailedExplanation": "Abstraction helps manage complexity by providing models that allow you to ignore implementation details. Encapsulation is stronger - it's the enforcer that prevents you from looking at details even if you want to. Either you have both abstraction and encapsulation or you have neither; there's no middle ground.",
    "topic": "encapsulation"
  },
  {
    "question": "When should you prefer inheritance over composition in object-oriented design?",
    "options": [
      "When you need to share common implementation code between classes",
      "When classes share common behavior but not data structures",
      "When you want to model true 'is a' relationships between entities",
      "When you need to reduce coupling between different system components"
    ],
    "correctAnswer": 2,
    "explanation": "Use inheritance for 'is a' relationships, composition for 'has a' relationships.",
    "detailedExplanation": "Inheritance should only be used when the derived class truly 'is a' more specific version of the base class. If multiple classes share common data but not behavior, create a common object that those classes can contain. If they share common behavior but not data, derive from a common base class. Inheritance should control your interface; composition lets you control your interface.",
    "topic": "inheritance-vs-composition"
  },
  {
    "question": "What approach should you take when code is too complicated to understand easily?",
    "options": [
      "Add comprehensive comments explaining each complex section thoroughly",
      "Rewrite the code to be simpler rather than documenting complexity",
      "Create detailed external documentation with flowcharts and diagrams",
      "Break the code into smaller functions while maintaining the logic"
    ],
    "correctAnswer": 1,
    "explanation": "Don't document bad code—rewrite it to be clearer.",
    "detailedExplanation": "Code Complete emphasizes that comments can't rescue difficult code. One study found that areas with large numbers of comments also had the most defects and consumed the most development effort. When code seems tricky, it's really bad code. You can always find a rewrite that's not tricky.",
    "topic": "code-documentation"
  },
  {
    "question": "What is the recommended maximum number of parameters for a routine to maintain understandability?",
    "options": [
      "No more than 5 parameters to ensure clarity and maintainability",
      "About 7 parameters based on human comprehension research",
      "Up to 10 parameters if they are well-documented and organized",
      "No specific limit as long as the interface abstraction is clear"
    ],
    "correctAnswer": 1,
    "explanation": "Seven is the magic number for human comprehension of discrete information chunks.",
    "detailedExplanation": "Psychological research found that people generally cannot keep track of more than about seven chunks of information at once. If you consistently pass more than a few arguments, the coupling among routines is too tight. Consider grouping routines into a class or passing composite data types instead of individual fields.",
    "topic": "routine-parameters"
  },
  {
    "question": "What is the optimal length for routines according to research cited in Code Complete?",
    "options": [
      "Routines should be exactly 50 lines with no exceptions allowed",
      "100-200 lines maximum, determined by function and logic naturally",
      "One screen length approximately 25-30 lines for easy viewing",
      "No more than 75 lines to maintain readability and testability"
    ],
    "correctAnswer": 1,
    "explanation": "Routines should be 100-200 lines maximum, with length determined naturally by function.",
    "detailedExplanation": "Decades of research show routines of this length are no more error-prone than shorter ones. Let cohesion, nesting depth, number of variables, decision points, and complexity considerations dictate length rather than imposing arbitrary restrictions. Object-oriented programs will have many short accessor routines, but complex algorithms may naturally require longer routines.",
    "topic": "routine-length"
  },
  {
    "question": "Which type of comment is considered most valuable for maintenance programmers?",
    "options": [
      "Comments that repeat the code in more readable language",
      "Comments that explain the intent and purpose of code sections",
      "Comments that provide detailed algorithmic step-by-step explanations",
      "Comments that document the original author and modification history"
    ],
    "correctAnswer": 1,
    "explanation": "Intent comments explain the purpose rather than repeating what the code does.",
    "detailedExplanation": "IBM found that maintenance programmers most often said understanding the original programmer's intent was the most difficult problem. Intent comments operate at the level of the problem rather than the solution. For example, '// get current employee information' is an intent comment, while '// update employeeRecord object' is just a summary.",
    "topic": "commenting"
  },
  {
    "question": "What is the primary benefit of using enumerated types over magic numbers?",
    "options": [
      "Enumerated types provide better performance optimization during compilation",
      "They make code more readable and maintainable than numeric constants",
      "Enumerated types use less memory than integer constants",
      "They enable better error checking and debugging capabilities"
    ],
    "correctAnswer": 1,
    "explanation": "Enumerated types make code more readable and maintainable by replacing magic numbers.",
    "detailedExplanation": "Instead of using values like 0, 1, 2 for different account types, enumerated types let you use AccountType.Checking, AccountType.Savings, AccountType.Investment. This makes the code self-documenting and easier to maintain. When using enumerated types, use a group prefix to clearly show that members belong to the same group.",
    "topic": "enumerated-types"
  },
  {
    "question": "According to Code Complete, what is the main purpose of assertions in code?",
    "options": [
      "To handle expected runtime errors and provide user feedback",
      "To document and verify assumptions about program state during development",
      "To improve performance by eliminating unnecessary condition checks",
      "To replace traditional commenting with executable documentation statements"
    ],
    "correctAnswer": 1,
    "explanation": "Assertions document and verify assumptions that should always be true if the program is correct.",
    "detailedExplanation": "Assertions are used to document assumptions that should always be true if the program is working correctly. They help catch programming errors during development and serve as executable documentation. Unlike error handling (which deals with expected problems), assertions deal with conditions that should never occur if the program is correct.",
    "topic": "assertions"
  },
  {
    "question": "What should you do if you're consistently passing the same data to many different routines?",
    "options": [
      "Create global variables to eliminate the redundant parameter passing",
      "Group the routines into a class and treat the data as class data",
      "Use longer, more descriptive parameter names to clarify the relationships",
      "Create wrapper functions that encapsulate the common parameter combinations"
    ],
    "correctAnswer": 1,
    "explanation": "Group related routines into a class with shared data to reduce tight coupling.",
    "detailedExplanation": "If you're consistently passing the same data to many routines, this indicates that the coupling among your routines is too tight. Grouping related routines into a class with shared data reduces the parameter-passing burden and creates better logical organization. This is one of the key benefits of object-oriented design.",
    "topic": "class-organization"
  },
  {
    "question": "What is the key difference between a function and a procedure according to Code Complete?",
    "options": [
      "Functions execute faster than procedures due to compiler optimization",
      "A function returns a value while a procedure does not return a value",
      "Procedures can have parameters while functions cannot accept parameters",
      "Functions can modify global state while procedures are purely local"
    ],
    "correctAnswer": 1,
    "explanation": "A function returns a value; a procedure does not return a value.",
    "detailedExplanation": "The distinction is both syntactic and semantic. Use a function if the primary purpose is to return the value indicated by the function name. Otherwise, use a procedure. For functions, name them for the value they return (like cos(), customerID()). For procedures, use a strong verb followed by an object (like PrintDocument(), CalcMonthlyRevenues()).",
    "topic": "functions-vs-procedures"
  },
  {
    "question": "What is the most important consideration when naming a variable according to Code Complete?",
    "options": [
      "Keep the name short to reduce typing time and save space",
      "The name should fully and accurately describe what the variable represents",
      "Use common abbreviations that other programmers will easily recognize",
      "Follow the company's established naming convention exactly without deviation"
    ],
    "correctAnswer": 1,
    "explanation": "The name should fully and accurately describe the entity the variable represents.",
    "detailedExplanation": "An effective technique for coming up with a good name is to state in words what the variable represents. That statement itself is often the best variable name. It's readable, unambiguous, and won't be confused with something else. For example, 'numberOfPeopleOnTheUsOlympicTeam' clearly describes what it represents.",
    "topic": "variable-naming"
  },
  {
    "question": "When should you use multiple inheritance according to Code Complete?",
    "options": [
      "Always use it for maximum flexibility in object-oriented design",
      "Primarily for defining mixins that add sets of properties to objects",
      "Never use it because it creates too many complex maintenance problems",
      "Only when single inheritance cannot adequately model the domain relationships"
    ],
    "correctAnswer": 1,
    "explanation": "Multiple inheritance is useful primarily for defining mixins - simple classes that add properties.",
    "detailedExplanation": "Mixins are called mixins because they allow properties to be 'mixed in' to derived classes. Examples include Displayable, Persistent, Serializable, or Sortable. They're nearly always abstract and aren't meant to be instantiated independently. They make design more comprehensible by 'chunking' attributes together, but should be used carefully.",
    "topic": "multiple-inheritance"
  },
  {
    "question": "What is the recommended approach for handling routine parameters that won't be modified?",
    "options": [
      "Pass them by reference to improve performance and reduce memory usage",
      "Use const keyword to indicate input-only parameters in supported languages",
      "Always pass primitive types by value and objects by reference",
      "Create local copies within the routine to prevent accidental modification"
    ],
    "correctAnswer": 1,
    "explanation": "The const keyword indicates that the parameter is input-only and won't be modified.",
    "detailedExplanation": "Using const helps prevent accidental modification of input parameters and makes the interface clearer. It's part of good defensive programming practice. The convention is to put input-only parameters first, input-and-output parameters second, and output-only parameters third, with const helping to enforce this distinction.",
    "topic": "routine-parameters"
  },
  {
    "question": "According to the book paradigm for documentation, how much improvement in comprehension can you expect?",
    "options": [
      "5-10 percent improvement over traditionally documented code",
      "10-20 percent improvement by applying typographic principles",
      "15-25 percent improvement with comprehensive documentation standards",
      "20-30 percent improvement when using automated documentation tools"
    ],
    "correctAnswer": 1,
    "explanation": "Research found 10-20 percent improvement in comprehension using book paradigm principles.",
    "detailedExplanation": "Oman and Cook found that by organizing code documentation like a book with preface, table of contents, sections, and cross-references, programmers achieved 10-20 percent improvement in comprehension. The average time to perform maintenance tasks was reduced to about three-quarters of traditional approaches, and maintenance scores averaged 20 percent higher.",
    "topic": "documentation-organization"
  },
  {
    "question": "What is the primary reason to create a routine according to Code Complete?",
    "options": [
      "To save space and avoid duplicate code throughout the program",
      "To reduce a program's complexity and improve intellectual manageability",
      "To improve performance through optimized code reuse and caching",
      "To follow established coding standards and organizational requirements"
    ],
    "correctAnswer": 1,
    "explanation": "The single most important reason to create a routine is to reduce complexity.",
    "detailedExplanation": "While avoiding duplicate code and improving performance are valid reasons, the primary purpose is intellectual manageability. Create a routine to hide information so you won't need to think about it. After it's written, you should be able to forget the details and use the routine without knowledge of its internal workings.",
    "topic": "routines"
  },
  {
    "question": "What should you do with 'temporary' variables according to Code Complete?",
    "options": [
      "Use them liberally for intermediate calculations to improve readability",
      "Be suspicious of them and consider giving them meaningful names instead",
      "Always prefix them with 'temp' to clearly indicate their temporary nature",
      "Avoid them completely and perform all calculations in single expressions"
    ],
    "correctAnswer": 1,
    "explanation": "Be leery of 'temporary' variables - they often indicate unclear purpose.",
    "detailedExplanation": "Most variables in your program are temporary in some way. Calling a few 'temporary' may indicate unclear purpose. Instead of 'temp = sqrt(b^2 - 4*a*c)', use 'discriminant = sqrt(b^2 - 4*a*c)' which describes what the variable actually represents. This makes the code more readable and the variable's purpose clear.",
    "topic": "temporary-variables"
  },
  {
    "question": "What is functional cohesion in routine design?",
    "options": [
      "When a routine uses functional programming concepts and pure functions",
      "When a routine performs one and only one operation effectively",
      "When a routine calls other functions frequently to accomplish its task",
      "When a routine has a mathematical function-like input/output interface"
    ],
    "correctAnswer": 1,
    "explanation": "Functional cohesion occurs when a routine performs one and only one operation.",
    "detailedExplanation": "Functional cohesion is the strongest and best kind of cohesion. Examples include sin(), GetCustomerName(), EraseFile(), CalculateLoanPayment(), and AgeFromBirthdate(). The goal is to have each routine do one thing well and not do anything else. Studies show 50% of highly cohesive routines were fault-free, while only 18% of low-cohesion routines were fault-free.",
    "topic": "routine-design"
  },
  {
    "question": "How should you handle boolean variables according to Code Complete naming guidelines?",
    "options": [
      "Always prefix boolean variables with 'is' to form clear questions",
      "Give them names that clearly imply true or false states",
      "Use single letters like 'b' followed by descriptive text",
      "Name them using numbers to distinguish different boolean purposes"
    ],
    "correctAnswer": 1,
    "explanation": "Boolean variables should have names that clearly imply true or false states.",
    "detailedExplanation": "Names like 'done' and 'success' are good because something is either done or not, successful or not. Names like 'status' are poor because it's unclear what true means. Use positive names rather than negative ones like 'notFound' because negations are harder to read, especially when negated: 'if not notFound' is confusing.",
    "topic": "boolean-naming"
  },
  {
    "question": "What should you document when working around an error in a library or language feature?",
    "options": [
      "Only document it if the error is likely to affect other team members",
      "Document the workaround and explain why the special case is necessary",
      "Create a separate bug report but avoid cluttering the code with comments",
      "Document it only in external documentation to keep code clean"
    ],
    "correctAnswer": 1,
    "explanation": "Document workarounds to explain why special handling is needed.",
    "detailedExplanation": "If you find a library routine has a defect that appears only under specific conditions, document why you're making a special case. This prevents well-intentioned programmers from changing the code to a 'better' style that might break your workaround. The explanation shows you knew what you were doing and weren't just being sloppy.",
    "topic": "commenting"
  },
  {
    "question": "What is the difference between deep and shallow copying in object design?",
    "options": [
      "Deep copies are faster while shallow copies use less memory",
      "Deep copies create member-wise copies; shallow copies use references",
      "Shallow copies are always preferable for performance optimization",
      "Deep copies handle inheritance while shallow copies handle composition"
    ],
    "correctAnswer": 1,
    "explanation": "Deep copies create member-wise copies; shallow copies typically use references.",
    "detailedExplanation": "The motivation for shallow copies is typically performance improvement, but this rarely causes measurable impact. Deep copies are simpler to code and maintain. Shallow copies add complexity with reference counting, safe object copies, comparisons, and deletes. Prefer deep copies until proven otherwise - it's a poor tradeoff to add complexity for dubious performance gains.",
    "topic": "object-copying"
  },
  {
    "question": "According to IBM's research on commenting density, what is the optimal number of comments?",
    "options": [
      "One comment for every 5 lines to ensure comprehensive documentation",
      "Roughly one comment for every 10 statements for peak clarity",
      "One comment for every 15 lines to avoid over-documentation",
      "Comments should be added only when the code is inherently complex"
    ],
    "correctAnswer": 1,
    "explanation": "IBM studies found that one comment per 10 statements optimized clarity.",
    "detailedExplanation": "Studies at IBM found that a commenting density of one comment roughly every 10 statements was where clarity peaked. Fewer comments made code hard to understand, but more comments also reduced understandability. Rather than focusing on comment count, focus on whether each comment is efficient and describes why the code was written.",
    "topic": "commenting"
  },
  {
    "question": "What is the most effective way to comment code according to Code Complete?",
    "options": [
      "Comment every line to explain exactly what each statement does",
      "Focus comments on why something is done rather than how it's done",
      "Use as many comments as possible to ensure future maintainability",
      "Only comment the most complex algorithms and leave simple code uncommented"
    ],
    "correctAnswer": 1,
    "explanation": "Effective comments focus on why rather than how something is done.",
    "detailedExplanation": "Comments that explain how something is done usually operate at the programming-language level rather than the problem level. Comments should operate at the level of intent, explaining the purpose rather than repeating the code. For example, '// find the command-word terminator ($)' is better than '// check each character until $ is found' because it explains the intent.",
    "topic": "commenting"
  },
  {
    "question": "What characterizes problem-oriented variable naming?",
    "options": [
      "Names that describe the computational algorithms being implemented",
      "Names that refer to 'what' rather than 'how' in the problem domain",
      "Names that follow standard programming language conventions",
      "Names that indicate the specific data types and memory structures used"
    ],
    "correctAnswer": 1,
    "explanation": "Problem orientation focuses on 'what' (the problem domain) rather than 'how' (the computing solution).",
    "detailedExplanation": "A good mnemonic name generally speaks to the problem rather than the solution. Names that refer to computing aspects represent 'how' rather than 'what.' For example, 'employeeData' refers to the problem domain while 'inputRec' refers to computing concepts. 'printerReady' is better than 'bitFlag' because it describes what the bit represents rather than how it's implemented.",
    "topic": "variable-naming"
  },
  {
    "question": "According to Code Complete, when should you create a new class?",
    "options": [
      "Only when modeling real-world objects that have clear physical counterparts",
      "To reduce complexity and isolate related functionality effectively",
      "Never create custom classes when built-in types can suffice",
      "Only when required by the programming language or framework"
    ],
    "correctAnswer": 1,
    "explanation": "The single most important reason to create a class is to reduce program complexity.",
    "detailedExplanation": "While modeling real-world objects is one reason, classes serve many purposes: reducing complexity, isolating complexity, hiding implementation details, limiting effects of changes, hiding global data, centralizing control, facilitating reuse, and planning for program families. Create a class to hide information so you won't need to think about it.",
    "topic": "class-creation"
  },
  {
    "question": "What should you do when choosing between using a whole object or specific elements as routine parameters?",
    "options": [
      "Always pass individual elements to minimize coupling between routines",
      "Pass whatever maintains the routine's interface abstraction effectively",
      "Always pass the whole object to maintain encapsulation principles",
      "Use whichever approach requires fewer lines of code to implement"
    ],
    "correctAnswer": 1,
    "explanation": "Pass variables or objects that maintain the routine's interface abstraction.",
    "detailedExplanation": "If the abstraction is that the routine expects three specific data elements, pass them individually. If the abstraction is that you'll always have that particular object and the routine does something with that object, pass the whole object. The key consideration is what abstraction is presented by the routine's interface, not a simplistic rule.",
    "topic": "parameter-passing"
  },
  {
    "question": "What is an Abstract Data Type (ADT) according to Code Complete?",
    "options": [
      "A theoretical concept with no practical programming applications",
      "A collection of data and operations that work on that data",
      "A data type that exists only in memory without persistent storage",
      "A mathematical model used exclusively in academic computer science"
    ],
    "correctAnswer": 1,
    "explanation": "An ADT is a collection of data and operations that work on that data.",
    "detailedExplanation": "Understanding ADTs is essential to object-oriented programming. An ADT might be a graphics window with all operations that affect it, a file and file operations, or an insurance-rates table and operations on it. ADTs allow you to work with real-world entities rather than low-level implementation entities, like adding a cell to a spreadsheet instead of inserting a node into a linked list.",
    "topic": "abstract-data-types"
  },
  {
    "question": "Which principle should guide class interface design according to Code Complete?",
    "options": [
      "Expose as much functionality as possible for maximum flexibility",
      "Present a consistent level of abstraction throughout the interface",
      "Make all methods public to ensure ease of use and accessibility",
      "Include implementation details for transparency and debugging purposes"
    ],
    "correctAnswer": 1,
    "explanation": "A class interface should present a consistent level of abstraction.",
    "detailedExplanation": "Each class should implement one and only one ADT. If you find a class implementing more than one ADT, or can't determine what ADT the class implements, it's time to reorganize. The interface should be abstract enough that you don't need to think about how services are implemented while working toward a consistent end.",
    "topic": "class-interfaces"
  },
  {
    "question": "What does Code Complete recommend regarding magic numbers in code?",
    "options": [
      "Magic numbers are acceptable if they're well-documented with comments",
      "Replace magic numbers with named constants that explain their meaning",
      "Use magic numbers sparingly but consistently throughout the codebase",
      "Magic numbers are fine for small values under 100 that are self-evident"
    ],
    "correctAnswer": 1,
    "explanation": "Magic numbers should be replaced with named constants that explain their meaning.",
    "detailedExplanation": "Magic numbers like 100, 4.0, 12, 2, and 3 provide no context for their purpose. They should be replaced with named constants that explain their meaning, like MAXIMUM_ELEMENTS or POINTS_PER_INCH. This makes the code self-documenting and easier to modify if the values need to change.",
    "topic": "magic-numbers"
  },
  {
    "question": "What is the pseudocode programming process and how does it help with commenting?",
    "options": [
      "A method of writing code in multiple programming languages simultaneously",
      "Writing high-level design in comments first, then filling in actual code",
      "Using mathematical notation to express algorithms before implementation",
      "Creating fake code that doesn't compile to test design concepts"
    ],
    "correctAnswer": 1,
    "explanation": "The pseudocode programming process involves writing high-level design in comments first.",
    "detailedExplanation": "This process helps reduce commenting time because when you finish the code, the comments are already done. You gain design benefits by writing high-level pseudocode before low-level programming language code. It also helps ensure your code is well-structured and your comments explain the intent rather than just repeating the code.",
    "topic": "pseudocode-process"
  }
]